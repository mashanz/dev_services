version: "3.8"

services:
  pg_master:
    container_name: pg-master
    restart: always
    build: ./postgres/master
    volumes:
      - pg_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PG_REP_USER=${PG_REP_USER}
      - PG_REP_PASSWORD=${PG_REP_PASSWORD}
    ports:
      - ${PG_PORT_MASTER}:5432
    networks:
      default:
        aliases:
          - pg_cluster
  pg_slave:
    container_name: pg-slave
    restart: always
    build: ./postgres/slave
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PG_REP_USER=${PG_REP_USER}
      - PG_REP_PASSWORD=${PG_REP_PASSWORD}
      - PG_MASTER_HOST=${PG_MASTER_HOST}
    ports:
      - ${PG_PORT_SLAVE}:5432
    networks:
      default:
        aliases:
          - pg_cluster
  mongo:
    container_name: mongo
    restart: always
    image: mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - ${MONGO_PORT}:27017
  rabitmqtt:
    container_name: rabitmqtt
    restart: always
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    ports:
      - ${RABBITMQ_PORT_SERVER}:5672
      - ${RABBITMQ_PORT_MANAGEMENT}:15672
  minio:
    container_name: minio
    restart: always
    image: minio/minio
    command: server /data --console-address ":9001"
    volumes:
      - ./minio/data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD}
    ports:
      - ${MINIO_PORT_WEB}:9000
      - ${MINIO_PORT_SERVER}:9001
  meilisearch:
    container_name: meilisearch
    restart: always
    image: getmeili/meilisearch
    environment:
      - MEILI_ENV=development
    volumes:
      - ./meilisearch:/meili_data
    ports:
      - ${MEILISEARCH_PORT}:7700
  vault:
    container_name: vault
    restart: always
    image: vault:1.13.3
    volumes:
      - ./vault/logs:/vault/logs
      - ./vault/file:/vault/file
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_DEV_ROOT_TOKEN_ID}
    ports:
      - ${VAULT_PORT}:8200
  rethink:
    container_name: rethink
    restart: always
    image: rethinkdb
    ports:
      - ${RETHINK_PORT}:8080
      - ${RETHINK_PORT_SERVER}:28015
      - ${RETHINK_PORT_CLUSTER}:29015
    volumes:
      - ./rethink/data:/data
  cache:
    image: "docker.io/readysettech/readyset:latest"
    platform: linux/amd64
    ports:
      # The ReadySet Adapter listen port, i.e. what your application / SQL shell connects to
      - "5433:5433"
      # ReadySet Prometheus metrics available at http://localhost:6034/metrics
      # e.g. curl -X GET http://localhost:6034/metrics
      - "6034:6034"
    environment:
      DEPLOYMENT_ENV: quickstart_docker
      DB_DIR: /state
      PROMETHEUS_METRICS: true
      QUERY_CACHING: explicit
      QUERY_LOG: true
      QUERY_LOG_AD_HOC: true
      STANDALONE: true
      DEPLOYMENT: docker_compose_deployment
      LISTEN_ADDRESS: 0.0.0.0:5433
      UPSTREAM_DB_URL: "postgres://postgres:postgres@pg_master:5432/core_actix"
      CONTROLLER_ADDRESS: 0.0.0.0
    volumes:
      - "readyset:/state"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "--fail", "127.0.0.1:6034/health"]
      interval: 2s
      timeout: 1s
      retries: 5
      start_period: 5s
  prometheus:
    image: "public.ecr.aws/readyset/readyset-prometheus:latest"
    healthcheck:
      test: ["CMD", "nc", "-vz", "localhost", "9090"]
      interval: 5s
      timeout: 5s
      retries: 12
    expose:
      - 9090
    volumes:
      - "prometheus:/prometheus"
  pushgateway:
    image: prom/pushgateway
    expose:
      - 9091
  grafana:
    image: "public.ecr.aws/readyset/readyset-grafana:latest"
    ports:
      - 4000:4000
    environment:
      UPSTREAM_DB_URL: "postgres://postgres:postgres@pg_master:5432/core_actix"
      RS_PORT: 5433
      RS_GRAFANA_PORT: 4000
  dragonfly:
    image: "docker.dragonflydb.io/dragonflydb/dragonfly"
    # ulimits:
    #   memlock: -1
    # cpus: 8
    ports:
      - "6379:6379"
    # For better performance, consider `host` mode instead `port` to avoid docker NAT.
    # `host` mode is NOT currently supported in Swarm Mode.
    # https://docs.docker.com/compose/compose-file/compose-file-v3/#network_mode
    # network_mode: "host"
    volumes:
      - dragonflydata:/data
volumes:
  pg_data:
  prometheus:
  readyset:
  dragonflydata:
